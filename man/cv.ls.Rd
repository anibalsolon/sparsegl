% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cv.R
\name{cv.ls}
\alias{cv.ls}
\title{#' @export
cv.logit <- function(outlist, lambda, x, y, foldid, pred.loss, delta) {
typenames <- c(misclass = "Misclassification Error", loss = "Margin Based Loss")
if (pred.loss == "default")
pred.loss <- "misclass"
if (!match(pred.loss, c("misclass", "loss"), FALSE)) {
warning("Only 'misclass' and 'loss' available for logistic regression; 'misclass' used")
pred.loss <- "misclass"
}
prob_min <- 1e-05
fmax <- log(1/prob_min - 1)
fmin <- -fmax
###Turn y into c(0,1)
y <- as.factor(y)
y <- c(-1, 1)\link{as.numeric(y)}
nfolds <- max(foldid)
predmat <- matrix(NA, length(y), length(lambda))
nlams <- double(nfolds)
for (i in seq(nfolds)) {
which <- foldid == i
fitobj <- outlist[\link{i}]
preds <- predict(fitobj, x\link{which, , drop = FALSE}, type = "link")
nlami <- length(outlist[\link{i}]$lambda)
predmat\link{which, seq(nlami)} <- preds
nlams\link{i} <- nlami
}
predmat <- pmin(pmax(predmat, fmin), fmax)
cvraw <- switch(pred.loss, loss = 2 * log(1 + exp(-y * predmat)), misclass = (y !=
ifelse(predmat > 0, 1, -1)))
N <- length(y) - apply(is.na(predmat), 2, sum)
cvm <- apply(cvraw, 2, mean, na.rm = TRUE)
cvsd <- sqrt(apply(scale(cvraw, cvm, FALSE)^2, 2, mean, na.rm = TRUE)/(N -
1))
list(cvm = cvm, cvsd = cvsd, name = typenames\link{pred.loss})
}}
\usage{
cv.ls(outlist, lambda, x, y, foldid, pred.loss, delta)
}
\description{
#' @export
cv.logit <- function(outlist, lambda, x, y, foldid, pred.loss, delta) {
typenames <- c(misclass = "Misclassification Error", loss = "Margin Based Loss")
if (pred.loss == "default")
pred.loss <- "misclass"
if (!match(pred.loss, c("misclass", "loss"), FALSE)) {
warning("Only 'misclass' and 'loss' available for logistic regression; 'misclass' used")
pred.loss <- "misclass"
}
prob_min <- 1e-05
fmax <- log(1/prob_min - 1)
fmin <- -fmax
###Turn y into c(0,1)
y <- as.factor(y)
y <- c(-1, 1)\link{as.numeric(y)}
nfolds <- max(foldid)
predmat <- matrix(NA, length(y), length(lambda))
nlams <- double(nfolds)
for (i in seq(nfolds)) {
which <- foldid == i
fitobj <- outlist[\link{i}]
preds <- predict(fitobj, x\link{which, , drop = FALSE}, type = "link")
nlami <- length(outlist[\link{i}]$lambda)
predmat\link{which, seq(nlami)} <- preds
nlams\link{i} <- nlami
}
predmat <- pmin(pmax(predmat, fmin), fmax)
cvraw <- switch(pred.loss, loss = 2 * log(1 + exp(-y * predmat)), misclass = (y !=
ifelse(predmat > 0, 1, -1)))
N <- length(y) - apply(is.na(predmat), 2, sum)
cvm <- apply(cvraw, 2, mean, na.rm = TRUE)
cvsd <- sqrt(apply(scale(cvraw, cvm, FALSE)^2, 2, mean, na.rm = TRUE)/(N -
1))
list(cvm = cvm, cvsd = cvsd, name = typenames\link{pred.loss})
}
}
